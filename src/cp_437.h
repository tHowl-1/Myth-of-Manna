#pragma once

#include <string>
#include <unordered_map>

/// <summary>
/// CP_437 is a compiled representation of the code point 437 ascii symbol set.
/// </summary>

const static std::unordered_map<std::string, int> CP_437(
{
	{"\x00", 0x00}, // 0
	{ "☺", 0x263A}, // 1
	{ "☻", 0x263B}, // 2
	{ "♥", 0x2665}, // 3
	{ "♦", 0x2666}, // 4
	{ "♣", 0x2663}, // 5
	{ "♠", 0x2660}, // 6 
	{ "•", 0x2022}, // 7
	{ "◘", 0x25D8}, // 8
	{ "○", 0x25CB}, // 9
	{ "◙", 0x25D9}, // 10
	{ "♂", 0x2642}, // 11
	{ "♀", 0x2640}, // 12
	{ "♪", 0x266A}, // 13
	{ "♫", 0x266B}, // 14
	{ "☼", 0x263C}, // 15
	{ "►", 0x25BA}, // 16
	{ "◄", 0x25C4}, // 17
	{ "↕", 0x2195}, // 18
	{ "‼", 0x203C}, // 19
	{ "¶", 0xB6},   // 20
	{ "§", 0xA7},   // 21
	{ "▬", 0x25AC}, // 22
	{ "↨", 0x21A8}, // 23
	{ "↑", 0x2191}, // 24
	{ "↓", 0x2193}, // 25
	{ "→", 0x2192}, // 26
	{ "←", 0x2190}, // 27
	{ "∟", 0x221F}, // 28
	{ "↔", 0x2194}, // 29
	{ "▲", 0x25B2}, // 30
	{ "▼", 0x25BC}, // 31
	{ " ", 0x20}, // 32
	{ "!", 0x21}, // 33
	{ "\"", 0x22}, // 34
	{ "#", 0x23}, // 35
	{ "$", 0x24}, // 36
	{ "%", 0x25}, // 37
	{ "&", 0x26}, // 38
	{ "'", 0x27}, // 39
	{ "(", 0x28}, // 40
	{ ")", 0x29}, // 41
	{ "*", 0x2A}, // 42
	{ "+", 0x2B}, // 43
	{ ",", 0x2C}, // 44
	{ "-", 0x2D}, // 45
	{ ".", 0x2E}, // 46
	{ "/", 0x2F}, // 47
	{ "0", 0x30}, // 48
	{ "1", 0x31}, // 49
	{ "2", 0x32}, // 50
	{ "3", 0x33}, // 51
	{ "4", 0x34}, // 52
	{ "5", 0x35}, // 53
	{ "6", 0x36}, // 54
	{ "7", 0x37}, // 55
	{ "8", 0x38}, // 56
	{ "9", 0x39}, // 57
	{ ":", 0x3A}, // 58
	{ ";", 0x3B}, // 59
	{ "<", 0x3C}, // 60
	{ "=", 0x3D}, // 61
	{ ">", 0x3E}, // 62
	{ "?", 0x3F}, // 63
	{ "@", 0x40}, // 64
	{ "A", 0x41}, // 65
	{ "B", 0x42}, // 66
	{ "C", 0x43}, // 67
	{ "D", 0x44}, // 68
	{ "E", 0x45}, // 69
	{ "F", 0x46}, // 70
	{ "G", 0x47}, // 71
	{ "H", 0x48}, // 72
	{ "I", 0x49}, // 73
	{ "J", 0x4A}, // 74
	{ "K", 0x4B}, // 75
	{ "L", 0x4C}, // 76
	{ "M", 0x4D}, // 77
	{ "N", 0x4E}, // 78
	{ "O", 0x4F}, // 79
	{ "P", 0x50}, // 80
	{ "Q", 0x51}, // 81
	{ "R", 0x52}, // 82
	{ "S", 0x53}, // 83
	{ "T", 0x54}, // 84
	{ "U", 0x55}, // 85
	{ "V", 0x56}, // 86
	{ "W", 0x57}, // 87
	{ "X", 0x58}, // 88
	{ "Y", 0x59}, // 89
	{ "Z", 0x5A}, // 90
	{ "[", 0x5B}, // 91
	{ "\\", 0x5C}, // 92
	{ "]", 0x5D}, // 93
	{ "^", 0x5E}, // 94
	{ "_", 0x5F}, // 95
	{ "`", 0x60}, // 96
	{ "a", 0x61}, // 97
	{ "b", 0x62}, // 98
	{ "c", 0x63}, // 99
	{ "d", 0x64}, // 100
	{ "e", 0x65}, // 101
	{ "f", 0x66}, // 102
	{ "g", 0x67}, // 103
	{ "h", 0x68}, // 104
	{ "i", 0x69}, // 105
	{ "j", 0x6A}, // 106
	{ "k", 0x6B}, // 107
	{ "l", 0x6C}, // 108
	{ "m", 0x6D}, // 109
	{ "n", 0x6E}, // 110
	{ "o", 0x6F}, // 111
	{ "p", 0x70}, // 112
	{ "q", 0x71}, // 113
	{ "r", 0x72}, // 114
	{ "s", 0x73}, // 115
	{ "t", 0x74}, // 116
	{ "u", 0x75}, // 117
	{ "v", 0x76}, // 118
	{ "w", 0x77}, // 119
	{ "x", 0x78}, // 120
	{ "y", 0x79}, // 121
	{ "z", 0x7A}, // 122
	{ "{", 0x7B}, // 123
	{ "|", 0x7C}, // 124
	{ "}", 0x7D}, // 125
	{ "~", 0x7E}, // 126
	{ "\x7f", 0x7F}, // 127
	{ "Ç", 0xC7}, // 128
	{ "ü", 0xFC}, // 129
	{ "é", 0xE9}, // 130
	{ "â", 0xE2}, // 131
	{ "ä", 0xE4}, // 132
	{ "à", 0xE0}, // 133
	{ "å", 0xE5}, // 134
	{ "ç", 0xE7}, // 135
	{ "ê", 0xEA}, // 136
	{ "ë", 0xEB}, // 137
	{ "è", 0xE8}, // 138
	{ "ï", 0xEF}, // 139
	{ "î", 0xEE}, // 140
	{ "ì", 0xEC}, // 141
	{ "Ä", 0xC4 }, // 142
	{ "Å", 0xC5 }, // 143
	{ "É", 0xC9 }, // 144
	{ "æ", 0xE6 }, // 145
	{ "Æ", 0xC6 }, // 146
	{ "ô", 0xF4 }, // 147
	{ "ö", 0xF6 }, // 148
	{ "ò", 0xF2 }, // 149
	{ "û", 0xFB }, // 150
	{ "ù", 0xF9 }, // 151
	{ "ÿ", 0xFF }, // 152
	{ "Ö", 0xD6 }, // 153
	{ "Ü", 0xDC }, // 154
	{ "¢", 0xA2 }, // 155
	{ "£", 0xA3 }, // 156
	{ "¥", 0xA5 }, // 157
	{ "₧", 0x20A7 }, // 158
	{ "ƒ", 0x0192 }, // 159
	{ "á", 0xE1 }, // 160
	{ "í", 0xED }, // 161
	{ "ó", 0xF3 }, // 162
	{ "ú", 0xFA }, // 163
	{ "ñ", 0xF1 }, // 164
	{ "Ñ", 0xD1 }, // 165
	{ "ª", 0xAA }, // 166
	{ "º", 0xBA }, // 167
	{ "¿", 0xBF }, // 168
	{ "⌐", 0x2310 }, // 169
	{ "¬", 0xAC }, // 170
	{ "½", 0xBD }, // 171
	{ "¼", 0xBC }, // 172
	{ "¡", 0xA1 }, // 173
	{ "«", 0xAB }, // 174
	{ "»", 0xBB }, // 175
	{ "░", 0x2591 }, // 176
	{ "▒", 0x2592 }, // 177
	{ "▓", 0x2593 }, // 178
	{ "│", 0x2502 }, // 179
	{ "┤", 0x2524 }, // 180
	{ "╡", 0x2561 }, // 181
	{ "╢", 0x2562 }, // 182
	{ "╖", 0x2556 }, // 183
	{ "╕", 0x2555 }, // 184
	{ "╣", 0x2563 }, // 185
	{ "║", 0x2551 }, // 186
	{ "╗", 0x2557 }, // 187
	{ "╝", 0x255D }, // 188
	{ "╜", 0x255C }, // 189
	{ "╛", 0x255B }, // 190
	{ "┐", 0x2510 }, // 191
	{ "└", 0x2514 }, // 192
	{ "┴", 0x2534 }, // 193
	{ "┬", 0x252C }, // 194
	{ "├", 0x251C }, // 195
	{ "─", 0x2500 }, // 196
	{ "┼", 0x253C }, // 197
	{ "╞", 0x255E }, // 198
	{ "╟", 0x255F }, // 199
	{ "╚", 0x255A }, // 200
	{ "╔", 0x2554 }, // 201
	{ "╩", 0x2569 }, // 202
	{ "╦", 0x2566 }, // 203
	{ "╠", 0x2560 }, // 204
	{ "═", 0x2550 }, // 205
	{ "╬", 0x256C }, // 206
	{ "╧", 0x2567 }, // 207
	{ "╨", 0x2568 }, // 208
	{ "╤", 0x2564 }, // 209
	{ "╥", 0x2565 }, // 210
	{ "╙", 0x2559 }, // 211
	{ "╘", 0x2558 }, // 212
	{ "╒", 0x2552 }, // 213
	{ "╓", 0x2553 }, // 214
	{ "╫", 0x256B }, // 215
	{ "╪", 0x256A }, // 216
	{ "┘", 0x2518 }, // 217
	{ "┌", 0x250C }, // 218
	{ "█", 0x2588 }, // 219
	{ "▄", 0x2584 }, // 220
	{ "▌", 0x258C }, // 221
	{ "▐", 0x2590 }, // 222
	{ "▀", 0x2580 }, // 223
	{ "α", 0x03B1 }, // 224
	{ "ß", 0xDF }, // 225
	{ "Γ", 0x0393 }, // 226
	{ "π", 0x03C0 }, // 227
	{ "Σ", 0x03A3 }, // 228
	{ "σ", 0x03C3 }, // 229
	{ "µ", 0xB5 }, // 230
	{ "τ", 0x03C4 }, // 231
	{ "Φ", 0x03A6 }, // 232
	{ "Θ", 0x0398 }, // 233
	{ "Ω", 0x03A9 }, // 234
	{ "δ", 0x03B4 }, // 235
	{ "∞", 0x221E }, // 236
	{ "φ", 0x03C6 }, // 237
	{ "ε", 0x03B5 }, // 238
	{ "∩", 0x2229 }, // 239
	{ "≡", 0x2261 }, // 240
	{ "±", 0xB1 }, // 241
	{ "≥", 0x2265 }, // 242
	{ "≤", 0x2264 }, // 243
	{ "⌠", 0x2320 }, // 244
	{ "⌡", 0x2321 }, // 245
	{ "÷", 0xF7 }, // 246
	{ "≈", 0x2248 }, // 247
	{ "°", 0xB0 }, // 248
	{ "∙", 0x2219 }, // 249
	{ "·", 0xB7 }, // 250
	{ "√", 0x221A }, // 251
	{ "ⁿ", 0x207F }, // 252
	{ "²", 0xB2 }, // 253
	{ "■", 0x25A0 }, // 254
	{ "\xA0", 0xA0 }, // 255 
});

// Return codepoint from map
const static int ord(std::string ch)
{
	auto value = CP_437.find(ch);
	if (value != CP_437.end())
		return value->second;
	return 0x00;
}
